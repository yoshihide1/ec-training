<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ec.training.mapper.OrdersEntityMapper">
  <resultMap id="BaseResultMap" type="ec.training.entity.OrdersEntity">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="total_amount" jdbcType="NUMERIC" property="totalAmount" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="shipping_address" jdbcType="VARCHAR" property="shippingAddress" />
    <result column="shipping_city" jdbcType="VARCHAR" property="shippingCity" />
    <result column="shipping_state" jdbcType="VARCHAR" property="shippingState" />
    <result column="shipping_postal_code" jdbcType="VARCHAR" property="shippingPostalCode" />
    <result column="shipping_country" jdbcType="VARCHAR" property="shippingCountry" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, total_amount, status, shipping_address, shipping_city, shipping_state, 
    shipping_postal_code, shipping_country, created_at, updated_at
  </sql>
  <select id="selectByExample" parameterType="ec.training.entity.example.OrdersEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from public.orders
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from public.orders
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="ec.training.entity.example.OrdersEntityExample">
    delete from public.orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="ec.training.entity.OrdersEntity" useGeneratedKeys="true">
    insert into public.orders (user_id, total_amount, status, 
      shipping_address, shipping_city, shipping_state, 
      shipping_postal_code, shipping_country, created_at, 
      updated_at)
    values (#{userId,jdbcType=BIGINT}, #{totalAmount,jdbcType=NUMERIC}, #{status,jdbcType=VARCHAR}, 
      #{shippingAddress,jdbcType=VARCHAR}, #{shippingCity,jdbcType=VARCHAR}, #{shippingState,jdbcType=VARCHAR}, 
      #{shippingPostalCode,jdbcType=VARCHAR}, #{shippingCountry,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="ec.training.entity.OrdersEntity" useGeneratedKeys="true">
    insert into public.orders
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="shippingAddress != null">
        shipping_address,
      </if>
      <if test="shippingCity != null">
        shipping_city,
      </if>
      <if test="shippingState != null">
        shipping_state,
      </if>
      <if test="shippingPostalCode != null">
        shipping_postal_code,
      </if>
      <if test="shippingCountry != null">
        shipping_country,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=NUMERIC},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="shippingAddress != null">
        #{shippingAddress,jdbcType=VARCHAR},
      </if>
      <if test="shippingCity != null">
        #{shippingCity,jdbcType=VARCHAR},
      </if>
      <if test="shippingState != null">
        #{shippingState,jdbcType=VARCHAR},
      </if>
      <if test="shippingPostalCode != null">
        #{shippingPostalCode,jdbcType=VARCHAR},
      </if>
      <if test="shippingCountry != null">
        #{shippingCountry,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="ec.training.entity.example.OrdersEntityExample" resultType="java.lang.Long">
    select count(*) from public.orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update public.orders
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.totalAmount != null">
        total_amount = #{record.totalAmount,jdbcType=NUMERIC},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.shippingAddress != null">
        shipping_address = #{record.shippingAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.shippingCity != null">
        shipping_city = #{record.shippingCity,jdbcType=VARCHAR},
      </if>
      <if test="record.shippingState != null">
        shipping_state = #{record.shippingState,jdbcType=VARCHAR},
      </if>
      <if test="record.shippingPostalCode != null">
        shipping_postal_code = #{record.shippingPostalCode,jdbcType=VARCHAR},
      </if>
      <if test="record.shippingCountry != null">
        shipping_country = #{record.shippingCountry,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update public.orders
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      total_amount = #{record.totalAmount,jdbcType=NUMERIC},
      status = #{record.status,jdbcType=VARCHAR},
      shipping_address = #{record.shippingAddress,jdbcType=VARCHAR},
      shipping_city = #{record.shippingCity,jdbcType=VARCHAR},
      shipping_state = #{record.shippingState,jdbcType=VARCHAR},
      shipping_postal_code = #{record.shippingPostalCode,jdbcType=VARCHAR},
      shipping_country = #{record.shippingCountry,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="ec.training.entity.OrdersEntity">
    update public.orders
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=NUMERIC},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="shippingAddress != null">
        shipping_address = #{shippingAddress,jdbcType=VARCHAR},
      </if>
      <if test="shippingCity != null">
        shipping_city = #{shippingCity,jdbcType=VARCHAR},
      </if>
      <if test="shippingState != null">
        shipping_state = #{shippingState,jdbcType=VARCHAR},
      </if>
      <if test="shippingPostalCode != null">
        shipping_postal_code = #{shippingPostalCode,jdbcType=VARCHAR},
      </if>
      <if test="shippingCountry != null">
        shipping_country = #{shippingCountry,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="ec.training.entity.OrdersEntity">
    update public.orders
    set user_id = #{userId,jdbcType=BIGINT},
      total_amount = #{totalAmount,jdbcType=NUMERIC},
      status = #{status,jdbcType=VARCHAR},
      shipping_address = #{shippingAddress,jdbcType=VARCHAR},
      shipping_city = #{shippingCity,jdbcType=VARCHAR},
      shipping_state = #{shippingState,jdbcType=VARCHAR},
      shipping_postal_code = #{shippingPostalCode,jdbcType=VARCHAR},
      shipping_country = #{shippingCountry,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>